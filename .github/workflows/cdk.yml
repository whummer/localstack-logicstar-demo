name: Deploy using CDK

on:
  push:
    paths-ignore:
      - 'README.md'
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  cdk:
    name: Setup infrastructure using CDK
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Install CDK
        run: |
          npm install -g aws-cdk-local aws-cdk
          cdklocal --version

      - name: Start LocalStack
        uses: LocalStack/setup-localstack@main
        with:
          image-tag: 'latest'
          use-pro: 'true'
          configuration: DEBUG=1
          install-awslocal: 'true'
        env:
          LOCALSTACK_AUTH_TOKEN: ${{ secrets.LOCALSTACK_AUTH_TOKEN }}

      - name: Install dependencies
        run: |
          cd cdk 
          pip3 install -r requirements.txt
          cd ..
          cd frontend
          echo "REACT_APP_API_ENDPOINT=https://example.com" > .env.local
          npm i && npx react-scripts build

      - name: Deploy using CDK
        run: |
          cd cdk
          export AWS_ACCESS_KEY_ID="test"
          export AWS_SECRET_ACCESS_KEY="test"
          export AWS_DEFAULT_REGION="us-east-1"
          cdklocal bootstrap
          cd ..
          AWS_CMD=awslocal CDK_CMD=cdklocal bash ./bin/deploy_cdk.sh

      - name: List the resources
        run: |
          awslocal lambda list-functions
          awslocal sqs list-queues 
          awslocal dynamodb list-tables
          awslocal s3 ls

      - name: Set up test dependencies
        run: |
          pip install requests boto3 pytest localstack-sdk-python

      - name: Run Integration Tests
        env:
          AWS_DEFAULT_REGION: us-east-1
          AWS_REGION: us-east-1
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
        run: |
          pytest tests/test_infra.py

      - name: Send a Slack notification
        if: failure() || github.event_name != 'pull_request'
        uses: ravsamhq/notify-slack-action@v2
        with:
          status: ${{ job.status }}
          token: ${{ secrets.GITHUB_TOKEN }}
          notification_title: "{workflow} has {status_message}"
          message_format: "{emoji} *{workflow}* {status_message} in <{repo_url}|{repo}>"
          footer: "Linked Repo <{repo_url}|{repo}> | <{run_url}|View Workflow run>"
          notify_when: "failure"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Generate a Diagnostic Report
        if: failure()
        run: |
          curl -s localhost:4566/_localstack/diagnose | gzip -cf > diagnose.json.gz

      - name: Upload the Diagnostic Report
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: diagnose.json.gz
          path: ./diagnose.json.gz
